name: Unity CI (Tests + Windows IL2CPP)

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  checks: write           # allow creating check runs
  pull-requests: write    # allow PR comments (when not from forks)
  statuses: write

jobs:
  tests:
    name: Unity EditMode Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache Library (Linux)
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-LinuxEditMode-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-LinuxEditMode-
            Library-

      - name: Run EditMode tests
        id: tests
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: .
          # unityVersion auto-detected from ProjectSettings/ProjectVersion.txt
          testMode: editmode
          githubToken: ${{ secrets.GITHUB_TOKEN }}  # minimal annotations

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: editmode-results
          path: ${{ steps.tests.outputs.artifactsPath }}

      # Publish a GitHub Check/PR comment when allowed; never fail the job if posting is blocked
      - name: Publish JUnit report (non-fatal)
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        continue-on-error: true
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: ${{ steps.tests.outputs.artifactsPath }}/**/*.xml
          check_name: Unity EditMode Tests
          include_passed: true
          annotate_notice: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # (Optional) enable PlayMode tests later
  # playtests:
  #   name: Unity PlayMode Tests
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   steps:
  #     - uses: actions/checkout@v4
  #       with: { lfs: true }
  #     - uses: actions/cache@v3
  #       with:
  #         path: Library
  #         key: Library-LinuxPlayMode-${{ hashFiles('Assets/**','Packages/**','ProjectSettings/**') }}
  #         restore-keys: |
  #           Library-LinuxPlayMode-
  #           Library-
  #     - name: Run PlayMode tests
  #       id: playtests
  #       uses: game-ci/unity-test-runner@v4
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #       with:
  #         projectPath: .
  #         testMode: playmode
  #         githubToken: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Upload playmode artifacts
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: playmode-results
  #         path: ${{ steps.playtests.outputs.artifactsPath }}
  #     - name: Publish PlayMode JUnit (non-fatal)
  #       if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
  #       continue-on-error: true
  #       uses: mikepenz/action-junit-report@v4
  #       with:
  #         report_paths: ${{ steps.playtests.outputs.artifactsPath }}/**/*.xml
  #         check_name: Unity PlayMode Tests
  #         include_passed: true
  #         annotate_notice: true
  #         github_token: ${{ secrets.GITHUB_TOKEN }}

  win64:
    name: Build Win64 (IL2CPP)
    runs-on: windows-2022
    needs: tests              # (or: [tests, playtests] if you enable the PlayMode job)
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache Library (Windows)
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-StandaloneWindows64-${{ hashFiles('Assets/**','Packages/**','ProjectSettings/**') }}
          restore-keys: |
            Library-StandaloneWindows64-
            Library-

      - name: Build (Win64, IL2CPP via Player Settings)
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: .
          targetPlatform: StandaloneWindows64
          buildName: T4E
          buildsPath: build

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: Windows64_IL2CPP
          path: build/StandaloneWindows64
